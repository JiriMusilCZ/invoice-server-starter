/*  _____ _______         _                      _
 * |_   _|__   __|       | |                    | |
 *   | |    | |_ __   ___| |___      _____  _ __| | __  ___ ____
 *   | |    | | '_ \ / _ \ __\ \ /\ / / _ \| '__| |/ / / __|_  /
 *  _| |_   | | | | |  __/ |_ \ V  V / (_) | |  |   < | (__ / /
 * |_____|  |_|_| |_|\___|\__| \_/\_/ \___/|_|  |_|\_(_)___/___|
 *                                _
 *              ___ ___ ___ _____|_|_ _ _____
 *             | . |  _| -_|     | | | |     |  LICENCE
 *             |  _|_| |___|_|_|_|_|___|_|_|_|
 *             |_|
 *
 *   PROGRAMOVÁNÍ  <>  DESIGN  <>  PRÁCE/PODNIKÁNÍ  <>  HW A SW
 *
 * Tento zdrojový kód je součástí výukových seriálů na
 * IT sociální síti WWW.ITNETWORK.CZ
 *
 * Kód spadá pod licenci prémiového obsahu a vznikl díky podpoře
 * našich členů. Je určen pouze pro osobní užití a nesmí být šířen.
 * Více informací na http://www.itnetwork.cz/licence
 */
package cz.itnetwork.entity;

import cz.itnetwork.constant.Countries;
import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;
import java.util.List;


/**
 * Represents a person (buyer or seller) within the system. This class is mapped to the {@code person} table
 * in the database and contains various details related to the person.
 *
 * <p>The {@code PersonEntity} class includes fields such as:</p>
 * <ul>
 *     <li>{@code id} - Unique identifier for the person.</li>
 *     <li>{@code name} - Name of the person.</li>
 *     <li>{@code identificationNumber} - Unique identification number of the person.</li>
 *     <li>{@code taxNumber} - Tax identification number of the person.</li>
 *     <li>{@code accountNumber} - Bank account number of the person.</li>
 *     <li>{@code bankCode} - Bank code of the person's bank.</li>
 *     <li>{@code iban} - International Bank Account Number (IBAN) of the person.</li>
 *     <li>{@code telephone} - Telephone number of the person.</li>
 *     <li>{@code mail} - Email address of the person.</li>
 *     <li>{@code street} - Street address of the person.</li>
 *     <li>{@code zip} - ZIP code of the person's address.</li>
 *     <li>{@code city} - City of the person's address.</li>
 *     <li>{@code country} - Country where the person resides, represented by a {@link Countries} enum.</li>
 *     <li>{@code note} - Additional notes or comments related to the person.</li>
 *     <li>{@code hidden} - Flag indicating whether the person is hidden (default is {@code false}).</li>
 *     <li>{@code purchases} - List of invoices where the person is the buyer, represented by a {@link List} of {@link InvoiceEntity} objects.</li>
 *     <li>{@code sales} - List of invoices where the person is the seller, represented by a {@link List} of {@link InvoiceEntity} objects.</li>
 * </ul>
 *
 * <p>The class uses Lombok annotations to automatically generate getters and setters for all fields.</p>
 *
 * @version 1.0
 * @since 2024
 */
@Entity(name = "person")
@Getter
@Setter
public class PersonEntity {

    /**
     * Unique identifier for the person.
     *
     * <p>This field is used to uniquely identify the person and is automatically generated by the database.</p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Name of the person.
     *
     * <p>This field must not be {@code NULL} in the database.</p>
     */
    @Column(nullable = false)
    private String name;

    /**
     * Unique identification number of the person.
     *
     * <p>This field must not be {@code NULL} in the database.</p>
     */
    @Column(nullable = false)
    private String identificationNumber;

    /**
     * Tax identification number of the person.
     *
     * <p>This field is optional and can be {@code NULL} in the database.</p>
     */
    private String taxNumber;

    /**
     * Bank account number of the person.
     *
     * <p>This field must not be {@code NULL} in the database.</p>
     */
    @Column(nullable = false)
    private String accountNumber;

    /**
     * Bank code of the person's bank.
     *
     * <p>This field must not be {@code NULL} in the database.</p>
     */
    @Column(nullable = false)
    private String bankCode;

    /**
     * International Bank Account Number (IBAN) of the person.
     *
     * <p>This field is optional and can be {@code NULL} in the database.</p>
     */
    private String iban;

    /**
     * Telephone number of the person.
     *
     * <p>This field must not be {@code NULL} in the database.</p>
     */
    @Column(nullable = false)
    private String telephone;

    /**
     * Email address of the person.
     *
     * <p>This field must not be {@code NULL} in the database.</p>
     */
    @Column(nullable = false)
    private String mail;

    /**
     * Street address of the person.
     *
     * <p>This field must not be {@code NULL} in the database.</p>
     */
    @Column(nullable = false)
    private String street;

    /**
     * ZIP code of the person's address.
     *
     * <p>This field must not be {@code NULL} in the database.</p>
     */
    @Column(nullable = false)
    private String zip;

    /**
     * City of the person's address.
     *
     * <p>This field must not be {@code NULL} in the database.</p>
     */
    @Column(nullable = false)
    private String city;

    /**
     * Country where the person resides.
     *
     * <p>This field is represented by a {@link Countries} enum and must not be {@code NULL} in the database.</p>
     */
    @Column(nullable = false)
    @Enumerated(EnumType.STRING)
    private Countries country;

    /**
     * Additional notes or comments related to the person.
     *
     * <p>This field is optional and can be {@code NULL} in the database.</p>
     */
    private String note;

    /**
     * Flag indicating whether the person is hidden.
     *
     * <p>This field is used to indicate whether the person should be hidden (default is {@code false}).</p>
     */
    private boolean hidden = false;

    /**
     * List of invoices where the person is the buyer.
     *
     * <p>This field represents a one-to-many relationship with the {@link InvoiceEntity} class where the person
     * is the buyer.</p>
     */
    @OneToMany(mappedBy = "buyer")
    List<InvoiceEntity> purchases;

    /**
     * List of invoices where the person is the seller.
     *
     * <p>This field represents a one-to-many relationship with the {@link InvoiceEntity} class where the person
     * is the seller.</p>
     */
    @OneToMany(mappedBy = "seller")
    List<InvoiceEntity> sales;


}
