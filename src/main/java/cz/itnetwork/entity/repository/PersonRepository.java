/*  _____ _______         _                      _
 * |_   _|__   __|       | |                    | |
 *   | |    | |_ __   ___| |___      _____  _ __| | __  ___ ____
 *   | |    | | '_ \ / _ \ __\ \ /\ / / _ \| '__| |/ / / __|_  /
 *  _| |_   | | | | |  __/ |_ \ V  V / (_) | |  |   < | (__ / /
 * |_____|  |_|_| |_|\___|\__| \_/\_/ \___/|_|  |_|\_(_)___/___|
 *                                _
 *              ___ ___ ___ _____|_|_ _ _____
 *             | . |  _| -_|     | | | |     |  LICENCE
 *             |  _|_| |___|_|_|_|_|___|_|_|_|
 *             |_|
 *
 *   PROGRAMOVÁNÍ  <>  DESIGN  <>  PRÁCE/PODNIKÁNÍ  <>  HW A SW
 *
 * Tento zdrojový kód je součástí výukových seriálů na
 * IT sociální síti WWW.ITNETWORK.CZ
 *
 * Kód spadá pod licenci prémiového obsahu a vznikl díky podpoře
 * našich členů. Je určen pouze pro osobní užití a nesmí být šířen.
 * Více informací na http://www.itnetwork.cz/licence
 */
package cz.itnetwork.entity.repository;

import cz.itnetwork.dto.PersonStatisticDTO;
import cz.itnetwork.entity.PersonEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.util.List;

/**
 * Repository interface for performing CRUD operations and custom queries on {@link PersonEntity}.
 *
 * <p>This interface extends {@link JpaRepository} to provide standard CRUD operations for {@link PersonEntity}.
 * It includes additional methods for finding persons by hidden status and identification number, as well as
 * for retrieving aggregated revenue statistics based on invoices where the person is the seller.</p>
 *
 * @version 1.0
 * @since 2024
 */
public interface PersonRepository extends JpaRepository<PersonEntity, Long> {

    /**
     * Finds persons based on their hidden status.
     *
     * @param hidden the hidden status to filter persons by
     * @return a list of {@link PersonEntity} instances that match the provided hidden status
     */
    List<PersonEntity> findByHidden(boolean hidden);

    /**
     * Finds persons by their identification number.
     *
     * @param identificationNumber the identification number to filter persons by
     * @return a list of {@link PersonEntity} instances that match the provided identification number
     */
    List<PersonEntity> findByIdentificationNumber(String identificationNumber);

    /**
     * Retrieves aggregated revenue statistics for persons based on invoices where they are the seller.
     *
     * <p>This query calculates the total revenue generated by each person as a seller. The result is returned
     * as a list of {@link PersonStatisticDTO} instances, each containing the person's ID, name, and the total
     * revenue.</p>
     *
     * @return a list of {@link PersonStatisticDTO} containing the revenue statistics for each person
     */
    @Query("SELECT new cz.itnetwork.dto.PersonStatisticDTO(p.id, p.name, SUM(i.price)) " +
            "FROM person p LEFT JOIN invoice i ON p.id = i.seller " +
            "GROUP BY p.id, p.name")
    List<PersonStatisticDTO> findPersonRevenue();

}
